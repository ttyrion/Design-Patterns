对象池（有时候也成为Resource Pool）模式的意义在于：
它能在以下情况下显著提高性能：
1、初始化类实例的成本高
2、类的实例化率高
3、系统内任何时候使用的实例化数量低

解决了什么问题:
Object Pool(or Resource Pool)模式用于管理"对象缓存"。客户端可以简单地请求pool提供一个已经被初始化过的对象，而不必去创建一个新的对象。
通常，pool会动态增长，也就是说，pool会在某种情况下（比如pool已经空了）创建新对象。
一个pool也可以给自己设置一个对象数量限制。

通常应该这么做：
当前未被使用的那些可复用的对象应该放在同一个对象池里面，这样这些对象就能用一个一致的策略来管理。
因此，pool通常被设计为一个singleton类。

对象池可以让其他地方从池子里"check out"对象，当这些对象不再被使用的时候，它们将被还给对象池，以便复用。
然而，我们并不希望某个"check out"必须等待一个特定对象被释放（并非内存释放，而是该对象不再被占用），所以对象池应该能够在某些情况下创建新实例，
不过，我们必须还实现一个策略来定期清理未被使用的对象。

对于Object Pool.png系统结构图的描述：
1、reusables:这些类实例在有限的时间内与其他对象协作，之后就不再协作（参考上面对对象池模式的意义的描述）
2、client：该类实例使用上述reusables对象
3、ReusablePool:该类实例管理reusables，提供给client使用。
注意：
pool可以设置限制大小，当pool的acquireReusable方法因为某些原因（比如数目限制）不能创建新的reusable对象时，
它需要等待，直到一个reusable对象回到pool：Client对象使用完毕某个reusable对象后，要把它传给ReusablePool对象的releaseReusable方法，
然后这个reusable对象会被放回pool内的Reusable对象集合。


Resource Loading Strategy(object creation strategy)
Several strategies are available, for example:
1、Eager: A specified number of Reusables are created by the ReusablePool when the ReusablePool is instantiated.
2、Lazy: Reusables are not created by the ReusablePool until they are requested by the a Client. Once Reusables are released, they are immediately available for other Clients.
3、Hybrid(A synthesis of Eager and Lazy): A specified number of Reusables are created eagerly, but additional Reusables are created lazily.
4、Lazy-Expanding: Creates resources lazily, but doesn’t re-use them until the ReusablePool reaches a certain size.
5、Eager-Expanding: Creates resources eagerly. Creates additional resources when available objects in the ReusablePool drops below a certain threshold.
6、Recycling Methods
一些可用策略：
1、急切性策略：ReusablePool初始化的时候即创建特定数目的可复用对象
2、懒惰性策略：ReusablePool只在有client请求的时候才创建对象，该对象在被client释放后（还给eusablePool，非内存释放），即可被其他client复用。
3、混合性策略：ReusablePool初始化时创建部分对象，当可复用对象数目不够时，创建新对象。
4、扩展懒惰策略：ReusablePool在收到client请求时创建新对象，当pool内的对象达到一定数目后，才复用pool内的对象。
5、扩展急切策略：ReusablePool初始化时创建部分对象，当pool内可复用的对象数目下降到某个阈值的时候，创建其他对象。
6、如有必要的话ReusablePool有责任把client使用完毕还回来的对象reset到某个初始状态。

























