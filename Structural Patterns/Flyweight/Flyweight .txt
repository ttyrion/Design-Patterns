Flyweight模式，从字面上看，可以叫轻量级模式，从实现细节看，可以叫享元模式。
个人觉得这些翻译都不好，只能用这个句话来描述Flyweight模式：
Flyweight模式是通过享元（share objects）来让系统更加轻量级（占用更少资源，比如内存）的一个模式。

如flyweight_class_diagram.jpg所示：
Flyweight模式有以下四个角色：
1、Flyweight
声明的接口，通过该接口，flyweights对象可以接收外部状态，并且根据外部状态产生相应的行为。
2、ConcreteFlyweight
实现Flyweight接口，并为内部状态分配存储。ConcreteFlyweight对象必须是可分享的，也就是说：
ConcreteFlyweight对象存储的状态必须都是内部状态，对象是独立于它的上下文的。
3、FlyweightFactory
创建和管理flyweight对象。这里的FlyweightFactory其实就相当于一个Object Pool。
4、client
client会引用flyweight对象，并且：client必须存储以及管理flyweight对象的外部状态（与flyweight对象的上下文有关的状态）。

Flyweight模式怎么分享对象的？
关键在于：把对象的状态分为内部和外部状态。
The key concept here is the distinction between intrinsic and extrinsic state. 
Intrinsic state is stored in the flyweight; it consists of information that’s independent of the flyweight’s context, thereby making it sharable. 
The extrinsic state depends on and varies with the flyweight’s context and therefore can’t be shared. 
Client objects are responsible for passing extrinsic state to the flyweight when it needs it.
可见，区分一个对象的Intrinsic和extrinsic两种状态，才能确定这个对象是否可共享的，才能应用Flyweight模式。

什么时候用Flyweight模式？
在满足下面所有条件的情况下:
1、系统使用了大量的对象。
2、大量的对象导致资源消耗过高，比如导致内存占用过高。
3、对象的大部分状态被认为是extrinsic，与上下文有关。
4、一旦删除了extrinsic状态，系统中的对象就可以被相对更少的对象替换掉。
5、系统不依赖对象标识，因为Flyweight对象是共享的（多个引用指向同一个实际内存中的对象），身份测试将为概念上不同的对象返回true。

这里有一个相对较好的Flyweight模式示例：
https://www.javacodegeeks.com/2015/09/flyweight-design-pattern.html


